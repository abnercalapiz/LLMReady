<?php
/**
 * llms.txt file generator class
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

class LLMR_Generator {
    
    private $seo_detector;
    
    public function __construct() {
        // SEO detector will be initialized when needed
    }
    
    /**
     * Get SEO detector instance
     */
    private function get_seo_detector() {
        if (!$this->seo_detector) {
            $this->seo_detector = new LLMR_SEO_Detector();
        }
        return $this->seo_detector;
    }
    
    /**
     * Generate the llms.txt file
     */
    public function generate_llms_file() {
        $settings = get_option('llmr_settings');
        $content = $this->generate_llms_content();
        
        $file_path = ABSPATH . 'llms.txt';
        $result = file_put_contents($file_path, $content);
        
        if ($result !== false) {
            // Update settings with generation info
            $settings['last_generated'] = current_time('mysql');
            $settings['total_urls'] = substr_count($content, "\n\n") + 1;
            update_option('llmr_settings', $settings);
            
            return true;
        }
        
        return false;
    }
    
    /**
     * Generate the content for llms.txt
     */
    private function generate_llms_content() {
        $settings = get_option('llmr_settings');
        $content = "# LLMs.txt - AI Tool Accessibility File\n";
        $content .= "# Generated by LLM Ready WordPress Plugin\n";
        $content .= "# Last updated: " . current_time('c') . "\n\n";
        
        // Get all URLs
        $urls = $this->get_all_urls();
        
        foreach ($urls as $url_data) {
            $content .= $this->format_url_entry($url_data);
        }
        
        return $content;
    }
    
    /**
     * Get all URLs to include in llms.txt
     */
    private function get_all_urls() {
        $settings = get_option('llmr_settings');
        $urls = array();
        
        // Get posts from selected post types
        if (!empty($settings['post_types'])) {
            $args = array(
                'post_type' => $settings['post_types'],
                'post_status' => 'publish',
                'posts_per_page' => -1,
                'no_found_rows' => true,
                'update_post_term_cache' => false,
                'update_post_meta_cache' => false
            );
            
            $query = new WP_Query($args);
            
            if ($query->have_posts()) {
                while ($query->have_posts()) {
                    $query->the_post();
                    $post_id = get_the_ID();
                    
                    // Check if post is noindex
                    if ($this->is_noindex($post_id)) {
                        continue;
                    }
                    
                    // Check if URL is excluded
                    $permalink = get_permalink($post_id);
                    if (in_array($permalink, $settings['excluded_urls'])) {
                        continue;
                    }
                    
                    $urls[] = array(
                        'url' => $permalink,
                        'title' => get_the_title(),
                        'author' => get_the_author(),
                        'date' => get_the_date('c'),
                        'modified' => get_the_modified_date('c'),
                        'excerpt' => get_the_excerpt()
                    );
                }
                wp_reset_postdata();
            }
        }
        
        // Add manually included URLs
        if (!empty($settings['included_urls'])) {
            foreach ($settings['included_urls'] as $url) {
                $urls[] = array(
                    'url' => $url,
                    'title' => 'Manually Added URL',
                    'author' => get_bloginfo('name'),
                    'date' => current_time('c'),
                    'modified' => current_time('c'),
                    'excerpt' => ''
                );
            }
        }
        
        return $urls;
    }
    
    /**
     * Check if a post is set to noindex
     */
    private function is_noindex($post_id) {
        $seo_detector = $this->get_seo_detector();
        
        // Check Yoast SEO
        if ($seo_detector->is_yoast_active()) {
            $noindex = get_post_meta($post_id, '_yoast_wpseo_meta-robots-noindex', true);
            if ($noindex == '1') {
                return true;
            }
        }
        
        // Check Rank Math
        if ($seo_detector->is_rankmath_active()) {
            $robots = get_post_meta($post_id, 'rank_math_robots', true);
            if (is_array($robots) && in_array('noindex', $robots)) {
                return true;
            }
        }
        
        // Check All in One SEO
        if ($seo_detector->is_aioseo_active()) {
            $robots = get_post_meta($post_id, '_aioseo_robots', true);
            if (is_array($robots) && in_array('noindex', $robots)) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Format a URL entry for llms.txt
     */
    private function format_url_entry($url_data) {
        $settings = get_option('llmr_settings');
        $entry = '';
        
        // URL
        $entry .= $url_data['url'] . "\n";
        
        // Title
        $entry .= "Title: " . $url_data['title'] . "\n";
        
        // Author
        if (!empty($settings['include_author'])) {
            $entry .= "Author: " . $url_data['author'] . "\n";
        }
        
        // License
        if (!empty($settings['include_license'])) {
            $license = apply_filters('llmr_content_license', 'CC BY 4.0');
            $entry .= "License: " . $license . "\n";
        }
        
        // Canonical
        if (!empty($settings['include_canonical'])) {
            $entry .= "Canonical: " . $url_data['url'] . "\n";
        }
        
        // Dates
        $entry .= "Published: " . $url_data['date'] . "\n";
        $entry .= "Modified: " . $url_data['modified'] . "\n";
        
        // Excerpt
        if (!empty($url_data['excerpt'])) {
            $entry .= "Description: " . wp_strip_all_tags($url_data['excerpt']) . "\n";
        }
        
        $entry .= "\n";
        
        return $entry;
    }
    
    /**
     * Regenerate on post save
     */
    public function regenerate_on_save($post_id, $post, $update) {
        // Avoid auto-save
        if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
            return;
        }
        
        // Check post type
        $settings = get_option('llmr_settings');
        if (!in_array($post->post_type, $settings['post_types'])) {
            return;
        }
        
        // Regenerate file
        $this->generate_llms_file();
    }
    
    /**
     * Regenerate on post delete
     */
    public function regenerate_on_delete($post_id) {
        $post = get_post($post_id);
        
        // Check post type
        $settings = get_option('llmr_settings');
        if (!in_array($post->post_type, $settings['post_types'])) {
            return;
        }
        
        // Regenerate file
        $this->generate_llms_file();
    }
    
    /**
     * Regenerate on post status change
     */
    public function regenerate_on_status_change($new_status, $old_status, $post) {
        // Only regenerate if status changed to/from publish
        if ($new_status === $old_status) {
            return;
        }
        
        if ($new_status === 'publish' || $old_status === 'publish') {
            // Check post type
            $settings = get_option('llmr_settings');
            if (!in_array($post->post_type, $settings['post_types'])) {
                return;
            }
            
            // Regenerate file
            $this->generate_llms_file();
        }
    }
    
    /**
     * AJAX handler for manual regeneration
     */
    public function ajax_regenerate() {
        // Check nonce
        if (!wp_verify_nonce($_POST['nonce'], 'llmr_regenerate')) {
            wp_die('Security check failed');
        }
        
        // Check capabilities
        if (!current_user_can('manage_options')) {
            wp_die('Insufficient permissions');
        }
        
        $result = $this->generate_llms_file();
        
        if ($result) {
            wp_send_json_success(array(
                'message' => __('llms.txt file regenerated successfully!', 'llmr')
            ));
        } else {
            wp_send_json_error(array(
                'message' => __('Failed to regenerate llms.txt file.', 'llmr')
            ));
        }
    }
}